{"version":3,"sources":["assets/images/covid.png","components/Card/index.js","redux/actions/index.js","components/Chart/index.js","components/Country/index.js","App.js","redux/reducers/globalReducer.js","redux/reducers/countryReducer.js","redux/reducers/dailyReducer.js","redux/reducers/index.js","config.js","services/api/index.js","redux/saga/global.js","redux/saga/country.js","redux/saga/index.js","redux/store.js","index.js"],"names":["module","exports","CardComponent","data","confirmed","recovered","deaths","lastUpdate","getTime","date","moment","format","Grid","container","justify","spacing","item","md","Card","variant","CardContent","Typography","gutterBottom","className","end","get","separator","duration","component","color","fetchCountries","createRoutine","fetchOneCountry","fetchGlobal","fetchDaily","Chart","isGlobal","global","daily","useSelector","state","dispatch","useDispatch","useEffect","Actions","request","LineChart","labels","map","datasets","label","borderColor","BarChart","backgroundColor","options","legend","display","title","text","console","log","connect","countries","getGlobal","style","width","Autocomplete","getOptionLabel","option","name","onChange","_","value","handleChange","id","debug","renderInput","params","TextField","margin","useState","setGlobal","Container","maxWidth","src","require","alt","initialState","loading","error","isFetched","combineReducers","action","type","REQUEST","SUCCESS","payload","ERROR","process","axios","defaults","create","baseURL","config","queryBuilder","url","query","buildUrl","path","queryParams","root","call","api","put","success","total","reportDate","all","takeLatest","rootSaga","fork","globalData","getCountries","configureStore","sagaMiddleware","createSagaMiddleware","middlewares","applyMiddleware","store","createStore","rootReducer","compose","run","close","END","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.04efdf12.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/covid.d7265326.png\";","import React from 'react';\r\nimport get from 'lodash/get'\r\nimport moment from 'moment'\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport CountUp from 'react-countup'\r\n\r\n\r\nexport default function CardComponent({data: { confirmed, recovered, deaths, lastUpdate }}) {\r\n\r\n    const getTime = () => {\r\n\r\n        if(!lastUpdate){\r\n            return '';\r\n        }\r\n        const date = moment(lastUpdate).format('DD.MM.YY, HH:MM');\r\n\r\n        return `${date} holatiga ko'ra`;\r\n\r\n    };\r\n\r\n\r\n    return (\r\n        <Grid container justify={'center'} spacing={2}>\r\n            <Grid item md={3}>\r\n                <Card variant=\"outlined\">\r\n                    <CardContent>\r\n                        <Typography variant={'h3'} gutterBottom>\r\n                            <CountUp\r\n                                className={'font-bold text-blue'}\r\n                                end={get(confirmed,'value', 0)}\r\n                                separator=\" \"\r\n                                duration={4}\r\n                            />\r\n                        </Typography>\r\n                        <Typography variant=\"h6\" component=\"h2\">\r\n                            Aniqlanganlar soni\r\n                        </Typography>\r\n                        <Typography color=\"textSecondary\">\r\n                            {getTime()}\r\n                        </Typography>\r\n                    </CardContent>\r\n                </Card>\r\n            </Grid>\r\n            <Grid item md={3}>\r\n                <Card variant=\"outlined\">\r\n                    <CardContent>\r\n                        <Typography variant={'h3'} gutterBottom>\r\n                            <CountUp\r\n                                className={'font-bold text-green'}\r\n                                end={get(recovered,'value', 0)}\r\n                                separator=\" \"\r\n                                duration={4}\r\n                            />\r\n                        </Typography>\r\n                        <Typography variant=\"h6\"  component=\"h2\">\r\n                            Tuzalganlar soni\r\n                        </Typography>\r\n                        <Typography color=\"textSecondary\">\r\n                            {getTime()}\r\n                        </Typography>\r\n                    </CardContent>\r\n                </Card>\r\n            </Grid>\r\n            <Grid item md={3}>\r\n                <Card variant=\"outlined\">\r\n                    <CardContent>\r\n                        <Typography variant={'h3'} color=\"secondary\" gutterBottom>\r\n                            <CountUp\r\n                                className={'font-bold'}\r\n                                end={get(deaths,'value', 0)}\r\n                                separator=\" \"\r\n                                duration={4}\r\n                            />\r\n                        </Typography>\r\n                        <Typography variant=\"h6\" component=\"h2\">\r\n                            O'limlar soni\r\n                        </Typography>\r\n                        <Typography color=\"textSecondary\">\r\n                            {getTime()}\r\n                        </Typography>\r\n                    </CardContent>\r\n                </Card>\r\n            </Grid>\r\n        </Grid>\r\n\r\n    );\r\n}","import { createRoutine } from 'redux-saga-routines'\r\n\r\nconst fetchCountries = createRoutine('FETCH_COUNTRIES');\r\nconst fetchOneCountry = createRoutine('FETCH_COUNTRY');\r\nconst fetchGlobal = createRoutine('FETCH_GLOBAL');\r\nconst fetchDaily = createRoutine('FETCH_DAILY');\r\n\r\nexport default {\r\n    fetchCountries,\r\n    fetchOneCountry,\r\n    fetchGlobal,\r\n    fetchDaily\r\n}","import React, { useEffect } from 'react'\r\nimport { Bar, Line } from 'react-chartjs-2';\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport Actions from 'redux/actions'\r\nimport get from 'lodash/get'\r\n\r\n\r\nconst Chart = ({ isGlobal, global, global: { confirmed, recovered, deaths } }) => {\r\n\r\n    const daily = useSelector(state => state.daily.data);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(Actions.fetchDaily.request())\r\n    }, [dispatch]);\r\n\r\n    const LineChart =\r\n\r\n        <Line\r\n            data={{\r\n                labels: daily.map(({ date }) => date),\r\n                datasets: [{\r\n                    data: daily.map(({ confirmed }) => confirmed),\r\n                    label: 'Aniqlanganlar soni',\r\n                    borderColor: '#3333ff',\r\n                },{\r\n                    data: daily.map(({ deaths }) => deaths),\r\n                    label: \"O'limlar soni\",\r\n                    borderColor: '#F50057',\r\n                }]\r\n            }}\r\n        />;\r\n\r\n    const BarChart = <Bar\r\n        data={{\r\n            labels: ['Aniqlanganlar soni', 'Tuzalganlar soni',\"O'limlar soni\"],\r\n            datasets: [{\r\n                label: 'Odamlar',\r\n                backgroundColor: [\r\n                    '#3333ff',\r\n                    '#008000',\r\n                    '#F50057',\r\n\r\n                ],\r\n                data: [get(confirmed,'value',''), get(recovered,'value',''), get(deaths,'value','') ]\r\n            }]\r\n        }}\r\n        options={{\r\n            legend: { display: false },\r\n            title: {display: true, text: get(isGlobal,'name','')}\r\n        }}\r\n    />;\r\n\r\n\r\n    console.log(global);\r\n    return (\r\n        <>\r\n            <Grid container justify={'center'} spacing={1}>\r\n                <Grid item md={9}>\r\n                    <div className={'chart-box'}>\r\n                        { !isGlobal ? LineChart : BarChart }\r\n                    </div>\r\n                </Grid>\r\n            </Grid>\r\n\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Chart;","import React, { useEffect } from 'react';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport { connect, useDispatch } from 'react-redux'\r\nimport Actions from \"redux/actions\";\r\n\r\nconst Country = ({ countries, getGlobal }) => {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(Actions.fetchCountries.request());\r\n    },[dispatch]);\r\n\r\n    const handleChange = value => {\r\n        dispatch(Actions.fetchOneCountry.request(value));\r\n        getGlobal(value ? value : null);\r\n    };\r\n\r\n    return (\r\n        <Grid container justify={'center'} spacing={1}>\r\n            <Grid item md={9}>\r\n                <div style={{ width: '100%' }}>\r\n                    <Autocomplete\r\n                        options={countries}\r\n                        getOptionLabel={option => option.name}\r\n                        onChange={(_,value) => handleChange(value)}\r\n                        id=\"debug\"\r\n                        debug\r\n                        renderInput={(params) => <TextField {...params} label=\"Davlatni tanlang\" margin=\"normal\"/>}\r\n                    />\r\n                </div>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        countries: state.countries.countries\r\n    }\r\n};\r\n\r\n\r\nexport default connect(mapStateToProps)(Country);","import React, { useEffect, useState } from 'react';\r\nimport { connect, useDispatch } from 'react-redux'\r\nimport Container from '@material-ui/core/Container';\r\nimport { Card, Country, Chart } from './components';\r\nimport Actions from 'redux/actions';\r\n\r\nconst App = ({ global }) =>{\r\n\r\n    const [isGlobal, setGlobal] = useState(null);\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(Actions.fetchGlobal.request());\r\n    }, [dispatch]);\r\n\r\n\r\n    return (\r\n        <div className={'main-page'}>\r\n            <Container maxWidth=\"lg\">\r\n                <div className={'main-title'}><img src={require('./assets/images/covid.png')} alt=\"\"/></div>\r\n                <Card data={global} />\r\n                <Country getGlobal={value => setGlobal(value)} />\r\n                <Chart {...{isGlobal, global}} />\r\n            </Container>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        global: state.data.global,\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps)(App);","import Actions from '../actions/index'\r\n\r\nconst initialState = {\r\n    loading: false,\r\n    global: {},\r\n    error: null\r\n};\r\n\r\nexport default (state = initialState, action) => {\r\n\r\n    switch(action.type){\r\n        case Actions.fetchGlobal.REQUEST:\r\n            return {\r\n                ...state,\r\n                loading: true\r\n            };\r\n        case Actions.fetchGlobal.SUCCESS:\r\n            return {\r\n                ...state,\r\n                global: action.payload,\r\n                loading: false\r\n            };\r\n        case Actions.fetchGlobal.ERROR:\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                error: action.payload\r\n            };\r\n        default:\r\n            return state\r\n    }\r\n};","import Actions from \"../actions\";\r\n\r\nconst initialState = {\r\n    isFetched: true,\r\n    countries: [],\r\n    error: null\r\n};\r\n\r\nexport default (state = initialState, action) => {\r\n    switch(action.type){\r\n        case Actions.fetchCountries.REQUEST:\r\n            return {\r\n                ...state,\r\n                isFetched: false\r\n            };\r\n        case Actions.fetchCountries.SUCCESS:\r\n            return {\r\n                ...state,\r\n                countries: [...state.countries, ...action.payload],\r\n                isFetched: true\r\n            };\r\n        case Actions.fetchCountries.ERROR:\r\n            return {\r\n                ...state,\r\n                error: action.payload,\r\n                isFetched: true\r\n            };\r\n        default:\r\n            return state\r\n    }\r\n}","import Actions from '../actions'\r\n\r\n\r\nconst initialState = {\r\n    data: [],\r\n    isFetched: true,\r\n    error: null\r\n};\r\n\r\nexport default (state=initialState, action) => {\r\n    switch(action.type){\r\n        case Actions.fetchDaily.REQUEST:\r\n            return {\r\n                ...state,\r\n                isFetched: false\r\n            };\r\n        case Actions.fetchDaily.SUCCESS:\r\n            return {\r\n                ...state,\r\n                data: [...state.data, ...action.payload],\r\n                isFetched: true\r\n            };\r\n        case Actions.fetchDaily.ERROR:\r\n            return {\r\n                ...state,\r\n                error: action.payload\r\n            };\r\n        default:\r\n            return state\r\n\r\n    }\r\n}","import { combineReducers } from 'redux'\r\nimport global from './globalReducer.js'\r\nimport countries from './countryReducer'\r\nimport daily from './dailyReducer'\r\n\r\nexport default combineReducers({\r\n    data: global,\r\n    countries,\r\n    daily\r\n})","const { REACT_APP_API_ROOT } = process.env;\r\n\r\nexport default {\r\n    API_ROOT: REACT_APP_API_ROOT\r\n}","import axios from 'axios'\r\nimport buildUrl from 'build-url'\r\nimport config from 'config'\r\n\r\naxios.defaults.params = {};\r\naxios.defaults.params['_f'] = 'json';\r\n\r\nconst queryBuilder = (url='', fields=[], include=[], filter={}, limit=0, sort='') => {\r\n\r\n    let query = {};\r\n\r\n    return buildUrl({\r\n        path: url,\r\n        queryParams: query\r\n    })\r\n};\r\n\r\nexport default {\r\n    request: axios.create({\r\n        baseURL: config.API_ROOT\r\n    }),\r\n    queryBuilder\r\n}","import { takeLatest, call, put, all } from 'redux-saga/effects'\r\nimport Actions from '../actions/index'\r\nimport { api } from 'services'\r\n\r\nfunction* fetchGlobal(){\r\n    try{\r\n        const { data: { confirmed, recovered, deaths, lastUpdate } } = yield call(api.request.get);\r\n\r\n        yield put(Actions.fetchGlobal.success({\r\n            confirmed,\r\n            recovered,\r\n            deaths,\r\n            lastUpdate\r\n        }))\r\n\r\n    }catch (error){\r\n        yield put(Actions.fetchGlobal.error(error))\r\n    }\r\n}\r\n\r\nfunction* fetchDaily(){\r\n    try{\r\n\r\n        const { data } = yield call(api.request.get, api.queryBuilder('daily'));\r\n        const total = data.map(item => ({\r\n            confirmed: item.confirmed.total,\r\n            deaths: item.deaths.total,\r\n            date: item.reportDate\r\n        }));\r\n\r\n        yield put(Actions.fetchDaily.success([...total]))\r\n\r\n    } catch(error){\r\n        yield put(Actions.fetchDaily.error(error))\r\n    }\r\n}\r\n\r\nexport default function* root(){\r\n    yield all([\r\n        takeLatest(Actions.fetchGlobal.REQUEST, fetchGlobal),\r\n        takeLatest(Actions.fetchDaily.REQUEST, fetchDaily)\r\n    ])\r\n}","import { takeLatest, call, put, all } from 'redux-saga/effects'\r\nimport Actions from '../actions/index'\r\nimport { api } from 'services'\r\n\r\n\r\nfunction* fetchCountries() {\r\n    try {\r\n\r\n        const {data: { countries }} = yield call(api.request.get, api.queryBuilder('countries'));\r\n\r\n        yield put(Actions.fetchCountries.success(countries));\r\n\r\n    } catch (error) {\r\n        yield put(Actions.fetchCountries.error(error));\r\n    }\r\n}\r\n\r\nfunction* fetchOneCountry({ payload }){\r\n    try{\r\n\r\n        const options = payload ? api.queryBuilder(`countries/${payload.name}`) : null;\r\n        const { data: { confirmed, deaths, recovered, lastUpdate} } = yield call(api.request.get, options);\r\n\r\n        yield put(Actions.fetchGlobal.success({\r\n            confirmed,\r\n            deaths,\r\n            recovered,\r\n            lastUpdate\r\n        }))\r\n    } catch(error){\r\n\r\n    }\r\n}\r\n\r\n\r\nexport default function* root() {\r\n    yield all([\r\n        takeLatest(Actions.fetchCountries.REQUEST, fetchCountries),\r\n        takeLatest(Actions.fetchOneCountry.REQUEST, fetchOneCountry),\r\n    ])\r\n}","import { all, fork } from 'redux-saga/effects'\r\nimport globalData from './global'\r\nimport getCountries from './country'\r\n\r\n\r\nexport default function* rootSaga() {\r\n    yield all([\r\n        fork(globalData),\r\n        fork(getCountries)\r\n    ])\r\n}","import logger from 'redux-logger'\r\nimport { createStore, applyMiddleware, compose } from 'redux'\r\nimport createSagaMiddleware, { END } from 'redux-saga'\r\nimport rootReducer from './reducers'\r\nimport rootSaga from './saga'\r\n\r\n\r\nconst configureStore = () => {\r\n\r\n    const sagaMiddleware = createSagaMiddleware();\r\n\r\n    let middlewares = [\r\n        applyMiddleware(sagaMiddleware)\r\n    ];\r\n\r\n    if( process.env.NODE_ENV === 'development' ){\r\n        middlewares = [\r\n            applyMiddleware(sagaMiddleware, logger),\r\n            window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n        ]\r\n    }\r\n\r\n    const store = createStore(\r\n        rootReducer,\r\n        compose(...middlewares)\r\n    );\r\n\r\n    sagaMiddleware.run(rootSaga);\r\n    store.close = () => store.dispatch(END);\r\n\r\n    return store\r\n};\r\n\r\n\r\nexport default configureStore;","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport App from './App'\r\nimport { Provider } from 'react-redux'\r\nimport configureStore from './redux/store'\r\nimport './assets/style/style.css'\r\n\r\nconst store = configureStore();\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App />\r\n    </Provider>,\r\n    document.getElementById('root')\r\n);"],"sourceRoot":""}